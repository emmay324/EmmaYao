public abstract class TwoDShape {
    private double width;
    private double height;

    public TwoDShape(double width, double height) {
        this.width = width;
        this.height = height;
    }

    public TwoDShape() {
        this.width = 0;
        this.height = 0;
    }

    public abstract double getArea();

    public void setHeight(double height) {
        this.height = height;
    }

    public void setWidth(double width) {
        this.width = width;
    }

    public double getHeight() {
        return height;
    }

    public double getWidth() {
        return width;
    }

    @Override
    public String toString() {
        return "Shape: " + this.getClass().getSimpleName() +
                ", Width: " + width +
                ", Height: " + height;
    }
}
interface Rotate {
    double angle = 0.0;

    void rotate90();

    void rotate180();

    void rotate(double degree);
}

class Triangle extends TwoDShape implements Rotate {
    private double side1;
    private double side2;
    private double side3;
    private double angle;

    public Triangle(double width, double height) {
        super(width, height);
        this.side1 = width;
        this.side2 = height;
        this.side3 = Math.sqrt(width*width + height*height);
        this.angle = 0.0;
    }

    public Triangle(double side1, double side2, double side3) {
        super();
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
        this.angle = 0.0;
    }

    private double heronsHeight() {
        double s = (side1 + side2 + side3) / 2;
        return 2 * Math.sqrt(s * (s - side1) * (s - side2) * (s - side3)) / side1;
    }

    public double getArea() {
        double height = heronsHeight();
        return 0.5 * side1 * height;
    }

    @Override
    public void rotate90() {
        this.angle = (this.angle + 90) % 360;
    }

    @Override
    public void rotate180() {
        this.angle = (this.angle + 180) % 360;
    }

    @Override
    public void rotate(double degree) {
        this.angle = (this.angle + degree) % 360;
    }

    @Override
    public String toString() {
        return super.toString() +
                ", Side 1: " + side1 +
                ", Side 2: " + side2 +
                ", Side 3: " + side3 +
                ", Angle: " + angle;
    }
}


class Circle extends TwoDShape {
    public static final double PI = 3.14159;
    private double radius;

    public Circle(double radius) {
        super();
        this.radius = radius;
    }

    public double getArea() {
        return PI * radius * radius;
    }

    @Override
    public String toString() {
        return super.toString() +
                ", Radius: " + radius;
    }
}
