import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class CaesarCipher {
    private int shift;

    public CaesarCipher(int shift) {
        this.shift = shift;
    }

    public String encrypt(String plaintext) {
        StringBuilder ciphertext = new StringBuilder();
        for (int i = 0; i < plaintext.length(); i++) {
            char c = plaintext.charAt(i);
            if (Character.isLetter(c)) {
                int code = ((int) Character.toLowerCase(c) - 'a' + shift) % 26;
                if (code < 0) {
                    code += 26;
                }
                ciphertext.append((char) (code + 'a'));
            } else {
                ciphertext.append(c);
            }
        }
        return ciphertext.toString();
    }

    public String decrypt(String ciphertext) {
        StringBuilder plaintext = new StringBuilder();
        for (int i = 0; i < ciphertext.length(); i++) {
            char c = ciphertext.charAt(i);
            if (Character.isLetter(c)) {
                int code = ((int) Character.toLowerCase(c) - 'a' - shift) % 26;
                if (code < 0) {
                    code += 26;
                }
                plaintext.append((char) (code + 'a'));
            } else {
                plaintext.append(c);
            }
        }
        return plaintext.toString();
    }

    public List<String> crack(String ciphertext) throws FileNotFoundException {
        List<String> possiblePlaintexts = new ArrayList<>();
        Set<String> dictionary = loadDictionary();
        for (int i = 1; i <= 25; i++) {
            String plaintext = decrypt(ciphertext, i);
            if (isInDictionary(plaintext, dictionary)) {
                possiblePlaintexts.add(plaintext);
            }
        }
        return possiblePlaintexts;
    }

    private Set<String> loadDictionary() throws FileNotFoundException {
        Set<String> dictionary = new HashSet<>();
        Scanner scanner = new Scanner(new File("words_alpha.txt"));
        while (scanner.hasNext()) {
            dictionary.add(scanner.next().toLowerCase());
        }
        return dictionary;
    }

    private boolean isInDictionary(String plaintext, Set<String> dictionary) {
        String[] words = plaintext.toLowerCase().split("\\W+");
        for (String word : words) {
            if (!dictionary.contains(word)) {
                return false;
            }
        }
        return true;
    }
}
